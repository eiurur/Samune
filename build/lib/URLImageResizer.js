// Generated by CoffeeScript 1.10.0
(function() {
  var ImageResizer, URLChecker, URLImageResizer, im, path, randomstring,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  im = require('imagemagick');

  randomstring = require('randomstring');

  ImageResizer = require('./ImageResizer');

  URLChecker = require('./URLChecker');

  module.exports = URLImageResizer = (function(superClass) {
    extend(URLImageResizer, superClass);

    function URLImageResizer(url, filename, dstDir, canCleanupOriginalImage) {
      URLImageResizer.__super__.constructor.call(this, url, filename, dstDir, canCleanupOriginalImage);
      this.filename = this.filename || randomstring.generate();
      this.srcDir = this.dstDir;
      this.srcFilename = "" + this.filename + this.ext;
    }

    URLImageResizer.prototype.isExistFile = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return URLChecker.isValidURL(_this.url).then(function(response) {
            return resolve(response);
          })["catch"](function(err) {
            return reject('image url is invalid');
          });
        };
      })(this));
    };

    URLImageResizer.prototype.identify = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.generateDestinationDirectory().then(function(_) {
            return _this.write();
          }).then(function(filename) {
            return im.identify(path.resolve(_this.dstDir + "/" + _this.srcFilename), function(err, features) {
              if (err) {
                return reject('image path or url is invalid');
              }
              _this.cleanupOriginalImage();
              return resolve(features);
            });
          });
        };
      })(this));
    };

    URLImageResizer.prototype.exec = function(sizes) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.generateDestinationDirectory().then(function(_) {
            return _this.write();
          }).then(function(filename) {
            var promises;
            promises = sizes.map(function(size) {
              return _this.resize(size);
            });
            return Promise.all(promises);
          }).then(function(thuimbnailFilenameList) {
            if (_this.canCleanupOriginalImage) {
              _this.cleanupOriginalImage();
            }
            return resolve(thuimbnailFilenameList);
          })["catch"](function(err) {
            return reject(err);
          });
        };
      })(this));
    };

    return URLImageResizer;

  })(ImageResizer);

}).call(this);
