// Generated by CoffeeScript 1.10.0
(function() {
  var PathImageResizer, Samune, URLChecker, URLImageResizer, _;

  _ = require('lodash');

  URLChecker = require('./URLChecker');

  URLImageResizer = require('./URLImageResizer');

  PathImageResizer = require('./PathImageResizer');

  module.exports = Samune = (function() {
    function Samune(opts) {
      if (URLChecker.isURL(opts.url)) {
        this.imageResizer = new URLImageResizer(opts.url, opts.filename, opts.dstDir, opts.canCleanupOriginalImage);
      } else {
        this.imageResizer = new PathImageResizer(opts.url, opts.filename, opts.dstDir, opts.canCleanupOriginalImage);
      }
    }

    Samune.prototype.identify = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.imageResizer.isExistFile().then(function(_) {
            return _this.imageResizer.identify();
          }).then(function(features) {
            return resolve(features);
          })["catch"](function(err) {
            return reject(new Error(err));
          });
        };
      })(this));
    };

    Samune.prototype.getFileSizeBite = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return URLChecker.getFileSizeBite().then(function(bite) {
            return resolve(bite);
          })["catch"](function(err) {
            return reject(new Error(err));
          });
        };
      })(this));
    };

    Samune.prototype.generate = function(sizes) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          sizes = _.isArray(sizes) ? sizes : [sizes];
          if (_.isUndefined(_.first(sizes))) {
            throw new Error('sizes is empty');
          }
          if (!sizes.every(function(size) {
            return _.isNumber(size);
          })) {
            throw new Error('sizes include NaN');
          }
          return _this.imageResizer.isExistFile().then(function(_) {
            return _this.imageResizer.exec(sizes);
          }).then(function(thuimbnailFilenameList) {
            return resolve(thuimbnailFilenameList);
          })["catch"](function(err) {
            return reject(new Error(err));
          });
        };
      })(this));
    };

    return Samune;

  })();

}).call(this);
