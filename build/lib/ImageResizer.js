// Generated by CoffeeScript 1.10.0
(function() {
  var ImageResizer, fs, im, mkdirp, path, randomstring, request;

  fs = require('fs');

  im = require('imagemagick');

  mkdirp = require('mkdirp');

  path = require('path');

  randomstring = require('randomstring');

  request = require('request');

  module.exports = ImageResizer = (function() {
    function ImageResizer(url, filename1, dstDir, canCleanupOriginalImage) {
      var filename;
      this.url = url;
      this.filename = filename1;
      this.dstDir = dstDir;
      this.canCleanupOriginalImage = canCleanupOriginalImage != null ? canCleanupOriginalImage : true;
      filename = this.url.split('/').pop();
      this.ext = path.extname(filename) || '.jpg';
      this.filename = this.filename || randomstring.generate();
    }

    ImageResizer.prototype.exec = function(sizes) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (!_this.dstDir) {
            throw new Error('dstDir is invalid');
          }
          _this.generateDir();
          return _this.write().then(function(filename) {
            var promises;
            promises = sizes.map(function(size) {
              return _this.resize(size);
            });
            return Promise.all(promises);
          }).then(function(thuimbnailFilenameList) {
            if (_this.canCleanupOriginalImage) {
              _this.cleanupOriginalImage();
            }
            return resolve(thuimbnailFilenameList);
          })["catch"](function(err) {
            return reject(err);
          });
        };
      })(this));
    };

    ImageResizer.prototype.generateDir = function() {
      return fs.existsSync(this.dstDir) || mkdirp.sync(this.dstDir);
    };

    ImageResizer.prototype.cleanupOriginalImage = function() {
      if (!fs.existsSync(this.dstDir + "/" + this.filename + this.ext)) {
        return;
      }
      return fs.unlink(this.dstDir + "/" + this.filename + this.ext);
    };

    ImageResizer.prototype.resize = function(width) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var options;
          options = {
            srcPath: path.resolve(_this.dstDir + "/" + _this.filename + _this.ext),
            dstPath: path.resolve(_this.dstDir + "/" + _this.filename + "_w" + width + _this.ext),
            format: _this.ext.replace('.', ''),
            width: width,
            customArgs: ['-define', "jpeg:size=" + width + "x30"]
          };
          return im.resize(options, function(err, stdout) {
            if (err) {
              return reject(err);
            }
            return resolve(_this.filename + "_w" + width + _this.ext);
          });
        };
      })(this));
    };

    ImageResizer.prototype.write = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var ws;
          ws = fs.createWriteStream(_this.dstDir + "/" + _this.filename + _this.ext);
          request(_this.url).pipe(ws);
          ws.on('finish', function() {
            return resolve("" + _this.filename + _this.ext);
          });
          return ws.on('error', function(err) {
            ws.end();
            return reject(err);
          });
        };
      })(this));
    };

    return ImageResizer;

  })();

}).call(this);
