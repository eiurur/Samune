// Generated by CoffeeScript 1.10.0
(function() {
  var DirectoryManager, ImageResizer, fs, im, path, request;

  fs = require('fs');

  im = require('imagemagick');

  path = require('path');

  request = require('request');

  DirectoryManager = require('./DirectoryManager');

  module.exports = ImageResizer = (function() {
    function ImageResizer(url, filename, dstDir, canCleanupOriginalImage) {
      this.url = url;
      this.filename = filename;
      this.dstDir = dstDir;
      this.canCleanupOriginalImage = canCleanupOriginalImage != null ? canCleanupOriginalImage : true;
      this.originalFilename = this.url.split('/').pop();
      this.ext = path.extname(this.originalFilename) || '.jpg';
    }

    ImageResizer.prototype.generateDestinationDirectory = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          if (!_this.dstDir) {
            return reject('dstDir is invalid');
          }
          return resolve(DirectoryManager.generateSync(_this.dstDir));
        };
      })(this));
    };

    ImageResizer.prototype.cleanupOriginalImage = function() {
      if (!DirectoryManager.existsSync(this.dstDir + "/" + this.filename + this.ext)) {
        return;
      }
      return fs.unlink(this.dstDir + "/" + this.filename + this.ext);
    };

    ImageResizer.prototype.resize = function(width) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var options;
          options = {
            srcPath: path.resolve(_this.srcDir + "/" + _this.srcFilename),
            dstPath: path.resolve(_this.dstDir + "/" + _this.filename + "_w" + width + _this.ext),
            format: _this.ext.replace('.', ''),
            width: width,
            customArgs: ['-define', "jpeg:size=" + width + "x30"]
          };
          return im.resize(options, function(err, stdout) {
            if (err) {
              return reject(err);
            }
            return resolve(_this.filename + "_w" + width + _this.ext);
          });
        };
      })(this));
    };

    ImageResizer.prototype.write = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var ws;
          ws = fs.createWriteStream(_this.dstDir + "/" + _this.filename + _this.ext);
          request(_this.url).pipe(ws);
          ws.on('finish', function() {
            return resolve("" + _this.filename + _this.ext);
          });
          return ws.on('error', function(err) {
            ws.end();
            return reject(err);
          });
        };
      })(this));
    };

    return ImageResizer;

  })();

}).call(this);
